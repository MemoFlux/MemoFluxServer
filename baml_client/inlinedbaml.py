# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "client<llm> QWenVL {\n  provider openai-generic\n  options {\n    model \"deepseek-ai/DeepSeek-V3\"\n    api_key env.SILICONFLOW_API_KEY\n    base_url \"https://api.siliconflow.cn/v1\"\n  }\n}\n\nclient<llm> Gemini {\n  provider openai\n  options {\n    model \"gemini-2.5-flash\"\n    base_url \"https://ki-llmapi.kispace.cc/v1\"\n    api_key sk-iRIzMYxmJKJ0jI6BauyK1ZkQb2hcRq9HDEWFcBo4tuP0mjGW\n  }\n}\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.202.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "knowledge.baml": "enum RelationShip {\n    PARENT @description(#\"\n        父节点\n    \"#)\n    CHILD @description(#\"\n        子节点\n    \"#)\n} \nclass Node{\n    targert_id int @description(#\"\n        用来指向相关节点\n    \"#)\n    relationship RelationShip @description(#\"\n        用来阐述两个节点之间的关系\n    \"#)\n}\n\nclass KnowledgeItem{\n    id int @description(#\"\n        知识项的唯一标识符\n    \"#)\n    header string @description(#\"\n        知识项的标题\n    \"#)\n    content string @description(#\"\n        知识项的具体内容\n    \"#)\n    node Node @description(#\"\n        知识项对应的节点信息\n    \"#)\n}\n\nclass Knowledge{\n    knowledge_items KnowledgeItem[] @description(#\"\n        知识项列表\n    \"#)\n    related_items  string[] @description(#\"\n        可能相关的知识名\n    \"#)\n    tags string[] @description(#\"\n        对这个知识的标签，该标签不能少于1个，不超过3个\n    \"#)\n}\n\nfunction KnowledgeStruct(text:string,tag:string[]) -> Knowledge {\n    client QWenVL\n    prompt #\"\n        你是一个知识图谱构建专家。这是用户希望结构化的内容：\n\n        {{ text }}\n        这是已经存在的tag，{{ tag }}。你需要尽量使用其中已存在的tag，在没有符合的tag时可以提供新的\n        请使用中文回复\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest BasicSpamTest {\n  functions [KnowledgeStruct]\n  args {\n    text #\"\n        AsyncIO Support\n        SQLAlchemy’s asyncio support depends upon the greenlet project. This dependency will be installed by default on common machine platforms, however is not supported on every architecture and also may not install by default on less common architectures. See the section Asyncio Platform Installation Notes (Including Apple M1) for additional details on ensuring asyncio support is present.\n\n        Supported Installation Methods\n        SQLAlchemy installation is via standard Python methodologies that are based on setuptools, either by referring to setup.py directly or by using pip or other setuptools-compatible approaches.\n    \"#\n    tag [\"asyncio\", \"Python\"]\n  }\n}",
}

def get_baml_files():
    return _file_map